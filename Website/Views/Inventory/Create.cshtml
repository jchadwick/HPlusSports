@model HPlusSports.Models.Product

@{
    ViewBag.Title = "Add New Product";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    @*
      Add these hidden fields so validation doesn't fail,
      even though they are going to get overridden on the
      server anyway.
    *@
    @Html.Hidden(nameof(Model.LastUpdated), DateTime.Now.ToString())
    @Html.Hidden(nameof(Model.LastUpdatedUserId), User.Identity.Name)


    <div class="form-horizontal">
      <h4>Product</h4>
      <hr />
      @Html.ValidationSummary(true, "", new { @class = "text-danger" })
      <div class="form-group">
        @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.DropDownListFor(model => model.CategoryId, null, htmlAttributes: new { @class = "form-control" })
          @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.SKU, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.EditorFor(model => model.SKU, new { htmlAttributes = new { @class = "form-control" } })
          @Html.ValidationMessageFor(model => model.SKU, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
          @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.EditorFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control" } })
          @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
          @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.MSRP, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.EditorFor(model => model.MSRP, new { htmlAttributes = new { @class = "form-control" } })
          @Html.ValidationMessageFor(model => model.MSRP, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
          @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
          <input type="submit" value="Create" class="btn btn-default" />
        </div>
      </div>
    </div>
}

<div>
  @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}
